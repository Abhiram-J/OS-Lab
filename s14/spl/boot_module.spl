loadi(65,7);    // init code
loadi(66,8);
loadi(22,35);   // int10
loadi(23,36);
loadi(2, 15);	// exception handler
loadi(3, 16);
loadi(63,13);	// library
loadi(64,14);
loadi(4, 17);	// timer interrupt
loadi(5, 18);
loadi(16,29);	// int7	
loadi(17,30);
loadi(83,69);	// even prog
loadi(91,70);	// prime prog
loadi(50,63);	// scheduler	
loadi(51,64);


// setting up page table for init process
PTBR = PAGE_TABLE_BASE+20;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";


// init
[PROCESS_TABLE + 17] = 1;
[PROCESS_TABLE + 20] = CREATED;
[PROCESS_TABLE + 27] = 80;
[PROCESS_TABLE + 28] = 0;
[PROCESS_TABLE + 29] = 8*512;
[PROCESS_TABLE + 30] = PAGE_TABLE_BASE+20;
[PROCESS_TABLE + 31] = 10;

[76 * 512] = [65 * 512 + 1];


// setting up page table for even program
PTBR = PAGE_TABLE_BASE+40;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 84;
[PTBR+5] = "0110";
[PTBR+6] = 85;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 83;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 86;
[PTBR+17] = "0110";
[PTBR+18] = 87;
[PTBR+19] = "0110";


// even
[PROCESS_TABLE + 33] = 2;
[PROCESS_TABLE + 36] = CREATED;
[PROCESS_TABLE + 43] = 88;
[PROCESS_TABLE + 44] = 0;
[PROCESS_TABLE + 45] = 8*512;
[PROCESS_TABLE + 46] = PAGE_TABLE_BASE+40;
[PROCESS_TABLE + 47] = 10;

[86 * 512] = [83 * 512 + 1];

// setting up page table for prime program
PTBR = PAGE_TABLE_BASE+60;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 89;
[PTBR+5] = "0110";
[PTBR+6] = 90;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 91;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 92;
[PTBR+17] = "0110";
[PTBR+18] = 93;
[PTBR+19] = "0110";


// even
[PROCESS_TABLE + 49] = 3;
[PROCESS_TABLE + 52] = CREATED;
[PROCESS_TABLE + 59] = 94;
[PROCESS_TABLE + 60] = 0;
[PROCESS_TABLE + 61] = 8*512;
[PROCESS_TABLE + 62] = PAGE_TABLE_BASE+60;
[PROCESS_TABLE + 63] = 10;

[92 * 512] = [91 * 512 + 1];


// setting all other states as terminated
alias pid R0;
pid = 4;
while ( pid < 16) do
	[PROCESS_TABLE + pid*16 + 4] = TERMINATED;
	pid = pid +1;
endwhile;

return;
