breakpoint;

[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE+1] * 16) + 9] = 10;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE+1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 11] * 512 - 1;
// print "ethi";
backup;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4] = TERMINATED;
multipush(R0);
R1 = EXIT_PROCESS;
R2 = [SYSTEM_STATUS_TABLE + 1];
call PROCESS_MANAGER;
multipop(R0);
// print "kazhinju";
alias newPID R2;
alias currPID R3;
currPID = [SYSTEM_STATUS_TABLE + 1];
newPID = currPID + 1;

while ( [PROCESS_TABLE + newPID*16 + 4] == TERMINATED && newPID != currPID) do
	newPID = newPID + 1;
	newPID = newPID%16;
	if(newPID == 0 ) then
		newPID = 1;
	endif;
endwhile;

if ( newPID == currPID) then
	halt;
endif;

call SCHEDULER;
restore;
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];

breakpoint;
ireturn;
